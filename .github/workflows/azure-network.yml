name: deploy sample network

on:

  workflow_dispatch:
    inputs:
      resource-group-name:
        required: false
        description: Azure resource group name (Leave empty to default to 'mattk09-{location}')
        type: string
      location:
        required: true
        description: Azure resource group location
        type: choice
        options:
        - centralus
        - westus2
      deployment-mode:
        required: true
        description: Azure deployment mode
        type: choice
        options:
        - Incremental
        - Validate
      private-storage-endpoint:
        required: true
        description: Azure Storage only accessible from vnet
        type: boolean
        default: true

env:
  IS_MAIN_PUSH: ${{ github.ref == 'refs/heads/main' }}
  MAIN_BICEP_TEMPLATE_PATH: ./bicep/main-sample-network.bicep
  AZURE_RESOURCE_GROUP_LOCATION: ${{ github.event.inputs.location || 'centralus' }}
  AZURE_DEPLOYMENT_NAME: ${{ format('sample-network.{0}.{1}', github.actor, github.RUN_ID) }}

  # Incremental is needed when using a private endpoint (https://www.huuhka.net/automating-azure-private-link-storage-private-endpoints/)
  # As the special Private Endpoint NIC is not in our ARM templates, complete mode will try to delete it, not be able to do so and get stuck. This seems to happen regardless of whether you have a delete lock or not.
  AZURE_DEPLOYMENT_MODE: >-
    ${{
      github.event.inputs.deployment-mode ||
      (github.ref == 'refs/heads/main' && 'Incremental' || 'Incremental')
    }}
  AZURE_DEPLOYMENT_USE_PRIVATE_STORAGE_ENDPOINT: ${{ github.event.inputs.private-storage-endpoint || 'true' }}


jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set current Azure Subscription and update environment variables
      run: |
        az account show
        echo "AZURE_SUBSCRIPTION_ID=$(az account show --query "id" --output tsv)" >> $GITHUB_ENV
        echo "AZURE_RESOURCE_GROUP_NAME=${{ github.event.inputs.resource-group-name || format('mattk09-{0}', env.AZURE_RESOURCE_GROUP_LOCATION) }}" >> $GITHUB_ENV
        [[ -n "${{ secrets.SSH_PUB }}" ]] || exit 1

    - name: Create Azure Resource Group
      uses: Azure/CLI@v1
      with:
        inlineScript: |
          #!/usr/bin/env bash

          az group create \
            --name $AZURE_RESOURCE_GROUP_NAME \
            --location $AZURE_RESOURCE_GROUP_LOCATION \
            --tags branch="$GITHUB_REF_NAME" repository="$GITHUB_REPOSITORY"
          echo ðŸŽ‰

    - name: Deploy Bicep templates ðŸ’ª
      id: azure-deploy
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
        deploymentMode: ${{ env.AZURE_DEPLOYMENT_MODE }}
        deploymentName: ${{ env.AZURE_DEPLOYMENT_NAME }}
        template: ${{ env.MAIN_BICEP_TEMPLATE_PATH }}
        failOnStdErr: false
        parameters: >-
          publicSshKey="${{ secrets.SSH_PUB }}"
          storageAccountUsesPrivateEndpoint=${{ env.AZURE_DEPLOYMENT_USE_PRIVATE_STORAGE_ENDPOINT }}

    - name: Save deployment output
      env:
        AZURE_DEPLOY_OUTPUT: ${{ toJSON(steps.azure-deploy.outputs) }}
      run: |
        mkdir artifacts
        echo $AZURE_DEPLOY_OUTPUT
        echo $AZURE_DEPLOY_OUTPUT >> artifacts/deployment.json

    - name: Upload Azure Deploy Output
      uses: actions/upload-artifact@v3
      with:
        name: Deployment
        path: artifacts

    - name: Last step diagnostics
      if: always()
      run: |
        pwd
        printenv | sort
        ls -alFR -I.git